<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:dwr="http://www.directwebremoting.org/schema/spring-dwr"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:spring="http://www.infinispan.org/schemas/spring" 
	xmlns:util="http://www.springframework.org/schema/util" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd http://www.directwebremoting.org/schema/spring-dwr http://www.directwebremoting.org/schema/spring-dwr-3.0.xsd http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.0.xsd http://www.infinispan.org/schemas/spring http://www.infinispan.org/schemas/infinispan-spring-5.0.xsd 
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd"
	default-autowire="byName">

	<import resource="application-mybatis.xml"/>

	<!-- auto wire bean -->
	<context:annotation-config/>
	<!-- auto scan bean base package , 可以有多个值，以逗号分开-->
	<context:component-scan base-package="com.vteba"/>

	<bean id="propertyConfigurer" class="com.vteba.service.context.config.PropUtils">
		<property name="locations">
			<list>
				<value>classpath:jndi.properties</value>
			</list>
		</property>
	</bean>
    
    <!-- 配置freeMarker的模板路径 -->  
    <bean id="freemarkerConfig"  
        class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">  
        <property name="templateLoaderPath" value="/WEB-INF/view/" />  
        <property name="freemarkerVariables">  
            <map>  
                <entry key="xml_escape" value-ref="fmXmlEscape" />  
<!--                 <entry key="webRoot" value="${webRoot}"></entry>   -->
<!--                 <entry key="jsRoot" value="${jsRoot}"></entry>   -->
            </map>  
        </property>  
        <!-- FreeMarker默认每隔5秒检查模板是否被更新，如果已经更新了，就会重新加载并分析模板。 但经常检查模板是否更新可能比较耗时。如果你的应用运行在生产模式下，而且你预期模板不会经常更新，   
            则可以将更新的延迟时间延长至一个小时或者更久。 可以通过为freemarkerSettings属性设置template_update_delay达到这一目的 -->  
        <property name="freemarkerSettings">  
            <props>  
                <prop key="template_update_delay">3600</prop>  
                <prop key="tag_syntax">auto_detect</prop><!-- 设置标签类型 两种：[] 和 <> 。[] 这种标记解析要快些 -->  
                <prop key="default_encoding">UTF-8</prop>  
                <prop key="output_encoding">UTF-8</prop>  
                <prop key="locale">zh_CN</prop>  
                <prop key="date_format">yyyy-MM-dd</prop>  
                <prop key="time_format">HH:mm:ss</prop>  
                <prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>  
                <prop key="number_format">#</prop><!-- 设置数字格式 以免出现 000.00 -->  
                <prop key="classic_compatible">true</prop><!-- 可以满足一般需要。默认情况变量为null则替换为空字符串，如果需要自定义，写上${empty!"EmptyValue of fbysss"}的形式即可  -->  
                <prop key="template_exception_handler">html_debug</prop><!-- ignore,debug,html_debug,rethrow -->  
            </props>  
        </property>  
        <!-- 一下语句可以也可以配置freemarkerSettings属性，代码更为简洁 -->  
        <!-- <property name="freemarkerSettings" ref="freemarkerConfiguration"></property> -->  
    </bean>  
    
    <bean id="fmXmlEscape" class="freemarker.template.utility.XmlEscape" /> 
    
    <bean id="skmbwDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
<!-- 	    <property name="driverClass" value="${jdbc.driverClassName}"/> -->
	    <!-- 基本属性 url、user、password -->
	    <property name="url" value="${jdbc.skmbwurl}" />
	    <property name="username" value="${jdbc.username}" />
	    <property name="password" value="${jdbc.password}" />
	      
	    <!-- 配置初始化大小、最小、最大 -->
	    <property name="initialSize" value="1" />
	    <property name="minIdle" value="1" /> 
	    <property name="maxActive" value="20" />
	 
	    <!-- 配置获取连接等待超时的时间 -->
	    <property name="maxWait" value="60000" />
	 
	    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
	    <property name="timeBetweenEvictionRunsMillis" value="60000" />
	 
	    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
	    <property name="minEvictableIdleTimeMillis" value="300000" />
	  
	    <property name="validationQuery" value="SELECT 'x'" />
	    <property name="testWhileIdle" value="true" />
	    <property name="testOnBorrow" value="false" />
	    <property name="testOnReturn" value="false" />
	 
	    <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
	    <property name="poolPreparedStatements" value="true" />
	    <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
	 
	    <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
	    <property name="filters" value="stat"/>
	    <property name="proxyFilters">
	    	<list>
	    		<ref bean="druidShardingFilter"/>
	    	</list>
	    </property>
	</bean>     

	<bean id="skmbw2DataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
	    <!-- 基本属性 url、user、password -->
	    <property name="url" value="${jdbc.skmbw2url}" />
	    <property name="username" value="${jdbc.username}" />
	    <property name="password" value="${jdbc.password}" />
	      
	    <!-- 配置初始化大小、最小、最大 -->
	    <property name="initialSize" value="1" />
	    <property name="minIdle" value="1" /> 
	    <property name="maxActive" value="20" />
	 
	    <!-- 配置获取连接等待超时的时间 -->
	    <property name="maxWait" value="60000" />
	 
	    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
	    <property name="timeBetweenEvictionRunsMillis" value="60000" />
	 
	    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
	    <property name="minEvictableIdleTimeMillis" value="300000" />
	  
	    <property name="validationQuery" value="SELECT 'x'" />
	    <property name="testWhileIdle" value="true" />
	    <property name="testOnBorrow" value="false" />
	    <property name="testOnReturn" value="false" />
	 
	    <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
	    <property name="poolPreparedStatements" value="true" />
	    <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
	 
	    <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
	    <property name="filters" value="stat"/>
	    <property name="proxyFilters">
	    	<list>
	    		<ref bean="druidShardingFilter"/>
	    	</list>
	    </property>
	</bean>

	<bean id="skmbwSessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="skmbwDataSource" />
		<property name="packagesToScan">
    		<list>
     			<value>com.vteba.user.model</value>
    		</list>
   		</property>
		<property name="namingStrategy">
			<bean class="org.hibernate.cfg.ImprovedNamingStrategy" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.jdbc.batch_size">50</prop>
				<prop key="hibernate.jdbc.fetch_size">10</prop>
				<prop key="hibernate.default_batch_fetch_size">50</prop>
				<prop key="hibernate.jdbc.use_reflection_optimizer">true</prop>
				<prop key="hibernate.jdbc.use_scrollable_resultset">false</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.use_sql_comments">true</prop>
				<prop key="hibernate.max_fetch_depth">3</prop>
				<prop key="javax.persistence.validation.mode">none</prop>

				<!--org.springframework.orm.hibernate4.SpringSessionContext-->
<!-- 				<prop key="hibernate.current_session_context_class">spring</prop> -->
			</props>
		</property>
	</bean>

<!-- 	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> -->
<!--   		<property name="dataSource" ref="skmbwDataSource" /> -->
<!-- 	</bean> -->

	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="skmbwSessionFactory"/>
	</bean>

	<!-- SpringJdbcTemplate -->
	<bean id="skmbwJdbcTemplate" class="com.vteba.tx.jdbc.spring.SpringJdbcTemplate">
		<property name="dataSource" ref="skmbwDataSource"/>
	</bean>

	<!-- aop transaction advice -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager"> 
		<tx:attributes>
			<tx:method name="get*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="query*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="list*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="find*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="load*" propagation="REQUIRED" read-only="true"/> 
			<tx:method name="unique*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="save*" propagation="REQUIRED"/>
			<tx:method name="add*" propagation="REQUIRED"/>
			<tx:method name="persist*" propagation="REQUIRED"/>
			<tx:method name="delete*" propagation="REQUIRED"/>
			<tx:method name="update*" propagation="REQUIRED"/>
			<tx:method name="insert*" propagation="REQUIRED"/>
			<tx:method name="remove*" propagation="REQUIRED"/>
			<tx:method name="create*" propagation="REQUIRED"/>
			<tx:method name="execute*" propagation="REQUIRED"/>
			<tx:method name="auto*" propagation="REQUIRED"/>
			<tx:method name="batch*" propagation="REQUIRED"/>
			<tx:method name="check*" propagation="REQUIRED"/>
			<tx:method name="calculate*" propagation="REQUIRED"/>
			<tx:method name="handle*" propagation="REQUIRED"/>
			<tx:method name="decide*" propagation="REQUIRED"/>
			<tx:method name="*" propagation="REQUIRED" isolation="DEFAULT" timeout="6000" rollback-for="com.vteba.common.exception.BusinessException"/>
		</tx:attributes> 
	</tx:advice>

	<aop:config>
		<aop:pointcut expression="execution(* com.vteba.*.*.impl.*.*(..))" id="serviceTxMethodPointCut"/>
		<aop:pointcut expression="execution(* com.vteba.*.*.service.impl.*.*(..))" id="financeTxMethodPointCut"/>
		<aop:pointcut expression="execution(* com.vteba.*.*.remote.*.*(..))" id="remoteTxMethodPointCut"/>		
		<aop:advisor advice-ref="transactionAdvice" pointcut-ref="serviceTxMethodPointCut"/>
		<aop:advisor advice-ref="transactionAdvice" pointcut-ref="financeTxMethodPointCut"/>
		<aop:advisor advice-ref="transactionAdvice" pointcut-ref="remoteTxMethodPointCut"/>
	</aop:config>

	<bean id="httpSolrServerFactory" class="org.springframework.data.solr.server.support.HttpSolrServerFactoryBean">
		<property name="url" value="http://localhost:8080/solr/db"/>
	</bean>

	<bean id="solrTemplate" class="org.springframework.data.solr.core.SolrTemplate">
		<constructor-arg ref="httpSolrServerFactory"/>
	</bean>
	
	<bean id="singleTableGenerator" class="com.vteba.tx.jdbc.sequence.SingleTableGenerator">
		<property name="dataSource" ref="skmbwDataSource"/>
		<!-- 模拟sequence的表名 -->
		<property name="incrementerName" value="sequences"/>
		<property name="databaseType" value="mysql"/>
		<!-- sequence的名字 -->
		<property name="sequenceName" value="USER_SEQ"/>
		<!-- sequence值的栏位名 -->
		<property name="seqValueColumn" value="seq_value"/>
		<!-- sequence名的栏位名 -->
		<property name="seqNameColumn" value="seq_name"/>
	</bean>
	
	<bean id="mailSenderImpl" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="${email.host}" />
		<property name="protocol" value="smtp"/>
		<property name="port" value="25"/>
		<property name="defaultEncoding" value="UTF-8"/>
		<property name="username" value="${email.username}" />
		<property name="password" value="${email.password}" />
		<property name="javaMailProperties">
			<props>
<!-- 				<prop key="mail.smtp.auth">true</prop> -->
				<!-- 使用gmail smtp server的必须参数 -->
<!-- 				<prop key="mail.smtp.starttls.enable">true</prop> -->
			</props>
		</property>
	</bean>
	
	<bean id="druidShardingFilter" class="com.vteba.tx.jdbc.filter.DruidShardingFilter">
		
	</bean>
	
	<bean id="schemaInterceptor" class="com.vteba.service.tenant.interceptor.DetermineSchemaInterceptor"/>
	<!--schema拦截器定义 -->
	<!-- proxy-target-class="true"使用cglib代理 expose-proxy="true"将该aop暴漏给AopContext，供查询-->
	<aop:config>
		<aop:pointcut expression="execution(* com.vteba.*.*.dao.*.*(..)) or execution(* com.vteba.*.dao.*.*(..))" id="schemaPointcut"/>
		<aop:advisor advice-ref="schemaInterceptor" pointcut-ref="schemaPointcut" />
	</aop:config>
	
	
</beans>